# Trakx YAML config
#   Values can be overridden with env vars
#     Example: `TRAKX_LOGLEVEL=debug trakx run`


# "debug", "info", "warn", "error", or "fatal"
# "debug" will enable debug only panics
loglevel: "info"

# debug vars
debug:
  # port to serve pprof over, 0 to disable
  pprofport: 1338

  # how often to update expvar vals, 0 to disable
  expvarinterval: 1s

  # set nofile limit, 0 for default
  # basically changes the max number of open sockets, equivalent to `ulimit -n`
  nofilelimit: 0

  # number of peer pointers to initialize at startup, max: 500'000
  peerchanmin: 5000

  # whether udp tracker validates connection IDs
  # only disable for debug purposes - if disabled tracker can be abused for UDP amplification
  checkconnids: true

# tracker vars
tracker:
  # announce interval for clients
  announce: 30m
  
  # max number of seconds to add to `announce` to smooth out request frequency
  # required: announcefuzz >= 0
  announcefuzz: 5m

  # http tracker vars
  http:
    # "enabled" enables the http tracker, "info" runs an http server that serves the index and DMCA page, "disabled" disables anything http related
    mode: "enabled"
    
    # ip address to bind to, null for all interfaces
    ip: null

    port: 1337
    
    # tcp timeouts in seconds, starting from soon as connection is accepted
    readtimeout: 3s
    writetimeout: 10s

    # number of worker goroutines to run
    threads: 512

  # udp tracker vars
  udp:
    enabled: true
    
    # ip address to bind to, null for all interfaces
    ip: null

    port: 1337
    
    # number of worker goroutines to run
    threads: 512

  # numwant vars
  numwant:
    # default number of peers in response if none specified
    default: 75
    
    # max number of peers in response, numwants above this will be capped
    limit: 200

# database vars
database:
  # Database type options:
  #   gomap - In memory database using golang maps
  type: "gomap"
  
  # Backup type options for gomap database:
  #   file  - Writes databse to file
  #   pg    - Write databse to postgres
  #   none  - Doesn't backup database
  backup: "none"
  
  # address for pg backup
  #   use "ENV:VARIABLE" for environment variables
  #   ex: "ENV:TEST" = os.Getenv("TEST")
  address: "ENV:DATABASE_URL"

  # peer database vars
  peer:
    # How often to check and remove expired peers
    trim: 10m
    
    # How often to backup database in case of crash, 0 to disable
    write: 0s
    
    # Maximum peer age before removal
    # recommended: timeout >= announce + announcefuzz
    timeout: 40m
  
  # udp connection database vars
  conn:
    # Minimum size of connection database map
    # Set to your maximum conndb size to reduce memory usage (preallocate)
    min: 0

    # How often to check and remove expired UDP connection IDs
    trim: 10m

    # Maximum UDP connection ID age before removal
    timeout: 30m
